# handlers/admin.py
from typing import List, Tuple, Any

from aiogram.filters.command import Command
from aiogram.filters import or_f
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineQuery, InlineQueryResultArticle, InputTextMessageContent, ChosenInlineResult, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder

from filters.base import IsAdmin, IsAuth
from keyboards.inline_builder import get_paginated_keyboard

from lang.translator import LocalizedTranslator
from db.crud import UserCRUD, PaymentCRUD, BookCRUD, CategoryCRUD

from config import dp, bot, admin_ids, admin_ids_str, base_dir
from utils.code_generator import generate_random_string_async_lower
from utils.telegram import send_message_admin

router = Router()


class States(StatesGroup):
    set_category_name = State()
    confirm_topics = State()
    confirm_chapters = State()
    categories = State()


# –¥–µ–ª–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞—è –∫–æ—Ä—Ç–µ–∂ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
async def get_chunk_list_results(start_index: int, list_arr: list, size: int = 50) -> List[Tuple[int, Any]]:
    """–î–µ–ª–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞—è —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–Ω–¥–µ–∫—Å, —ç–ª–µ–º–µ–Ω—Ç)."""
    overall_items = len(list_arr)
    # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if start_index >= overall_items:
        return []
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞
    end_index = min(start_index + size, overall_items)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å —Å–ø–∏—Å–∫–∞ –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–µ–π (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å, —ç–ª–µ–º–µ–Ω—Ç)
    return [(i + 1, list_arr[i]) for i in range(start_index, end_index)]


# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
async def generate_error_result(translator, title_key, description_key):
    return [
        InlineQueryResultArticle(
            id="1",
            title=translator.get(title_key),
            description=translator.get(description_key),
            thumbnail_url="https://sun6-22.userapi.com/s/v1/if1/rLwx4UQ-0gPXldP0i_OLqIA4GwU6qcv9F4Nq0DxgG_gPp5goeEQtIIfLUfvAri67tAGHiqhX.jpg?size=250x250&quality=96&crop=0,0,250,250&ava=1",
            input_message_content=InputTextMessageContent(
                message_text=f"/start", parse_mode=ParseMode.HTML
            )
        )
    ]


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /books
@router.message(IsAuth, or_f(Command("books"), Command("start", magic=F.args == 'books')))
async def cmd_categories(message: Message, state: FSMContext, translator: LocalizedTranslator, session) -> None:
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
    categories = await CategoryCRUD.get_all_categories(session)
    captcha_code = await generate_random_string_async_lower()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(code=captcha_code, message_id=message.message_id+1)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await state.set_state(States.categories)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–¥ –∫–∞–ø—á–∏)
    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.row(
            InlineKeyboardButton(
                text=category.name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                switch_inline_query_current_chat=f"#bs_{captcha_code}_{
                    category.code}"
            )
        )
    keyboards = builder.as_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await message.answer(translator.get('choose_category'), reply_markup=keyboards)


# –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ —Å –∫–∞–ø—á–µ–π
@router.inline_query(F.query.startswith('#bs_'), States.categories)
async def query_choose_books(inline_query: InlineQuery, state: FSMContext, translator: LocalizedTranslator, session) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    saved_code = state_data.get('code')
    message_id = state_data.get('message_id')

    if message_id:
        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await bot.edit_message_text(
            chat_id=inline_query.from_user.id, message_id=message_id,
            text=translator.get('choose_book'), reply_markup=None
        )
        await state.update_data(message_id=None)

    # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
    query_parts = inline_query.query.split('_')
    if len(query_parts) < 3 or query_parts[0] != '#bs':
        await inline_query.answer([], cache_time=0)
        return

    _, query_code, category_code = query_parts

    # –ï—Å–ª–∏ –∫–∞–ø—á–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è
    if query_code != saved_code:
        results = await generate_error_result(translator, 'code_404', 'code_404_description')
        await inline_query.answer(
            results, is_personal=True, cache_time=0, switch_pm_text=translator.get('switch_pm_text_start'),
            switch_pm_parameter='start'
        )
        await state.update_data(code=None)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    books = await BookCRUD.get_all_books_by_category_code(session, category_code)
    if not books:
        results = await generate_error_result(translator, 'no_more_results', 'no_more_results_description')
        await inline_query.answer(
            results, is_personal=True, cache_time=0, switch_pm_text=translator.get('switch_pm_text_books'),
            switch_pm_parameter="books"
        )
        await state.update_data(code=None)
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    offset = int(inline_query.offset) if inline_query.offset else 0
    chunk_list = await get_chunk_list_results(offset, books)

    if not chunk_list:
        # –û—á–∏—Å—Ç–∫–∞ –∫–∞–ø—á–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await state.update_data(code=None)
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = [
        InlineQueryResultArticle(
            id=str(i),
            title=f'{translator.get("description_part_1")} {i}',
            description=book['title'],
            thumbnail_url=book.get(
                'image_url', "https://i.imgur.com/Dnm3RRZ.png"),
            input_message_content=InputTextMessageContent(
                message_text=f'''üìö <b><a href="{
                    book['book_url']}">{book['title']}</a></b>''',
                parse_mode='HTML'
            )
        ) for i, book in chunk_list
    ]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    next_offset = str(offset + len(chunk_list)
                      ) if len(chunk_list) == 50 else ""
    await inline_query.answer(
        results, cache_time=0, is_personal=True,
        next_offset=next_offset,
        switch_pm_text=translator.get('switch_pm_text_books'),
        switch_pm_parameter="books"
    )


# TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥
@router.inline_query(F.query.startswith('all'))
async def query_search_books(inline_query: InlineQuery, state: FSMContext, translator: LocalizedTranslator, session) -> None:

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_code = 'xx9k23b12'  # –¥–ª—è —Ç–µ—Å—Ç–∞
    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ 7—à—Ç—É–∫ * 30 = 210 —à—Ç—É–∫
    cats = await BookCRUD.get_all_books_by_category_code(session, category_code)
    cats = cats*30

    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∫–Ω–∏–≥
    offset = int(inline_query.offset) if inline_query.offset else 0
    chunk_list = await get_chunk_list_results(offset, cats)

    results = [InlineQueryResultArticle(
        id=str(i),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        title=f'{translator.get("description_part_1")} {i}',
        description=book['title'],
        thumbnail_url=book.get(
            'image_url', "https://i.imgur.com/Dnm3RRZ.png"),
        input_message_content=InputTextMessageContent(
            message_text=f'''üìö <b><a href="{
                book['book_url']}">{book['title']}</a></b>''',
            parse_mode='HTML'
        )) for i, book in chunk_list]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º next_offset —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    next_offset = str(
        offset + len(chunk_list)
    ) if len(chunk_list) == 50 else ""
    await inline_query.answer(
        results, cache_time=0, is_personal=True,
        next_offset=next_offset
    )


# TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥
@router.inline_query(F.query.startswith('my'))
async def query_search_my_books(inline_query: InlineQuery, state: FSMContext, translator: LocalizedTranslator, session) -> None:

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_code = 'xx9k23b12'  # –¥–ª—è —Ç–µ—Å—Ç–∞
    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ 7—à—Ç—É–∫ * 30 = 210 —à—Ç—É–∫
    cats = await BookCRUD.get_all_books_by_category_code(session, category_code)
    cats = cats*30

    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∫–Ω–∏–≥
    offset = int(inline_query.offset) if inline_query.offset else 0
    chunk_list = await get_chunk_list_results(offset, cats)

    results = [InlineQueryResultArticle(
        id=str(i),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        title=f'{translator.get("description_part_1")} {i}',
        description=book['title'],
        thumbnail_url=book.get(
            'image_url', "https://i.imgur.com/Dnm3RRZ.png"),
        input_message_content=InputTextMessageContent(
            message_text=f'''üìö <b><a href="{
                book['book_url']}">{book['title']}</a></b>''',
            parse_mode='HTML'
        )) for i, book in chunk_list]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º next_offset —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    next_offset = str(
        offset + len(chunk_list)
    ) if len(chunk_list) == 50 else ""
    await inline_query.answer(
        results, cache_time=0, is_personal=True,
        next_offset=next_offset
    )
